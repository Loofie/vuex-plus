import generateMappingFunction from './mappingFunctions.js';
import generateAddStore from '../mixins/addStore.js';
import useStore from '../mixins/useStore.js';

let importer;
const toCamelCase = str => str.replace(/(-|_)([a-z])/g, function (s) { return s[1].toUpperCase(); });

/**
 * The api for all stores
 * The api is autogenerated once the module importer has been set
 * ```
 *   api.aStore.get.something => vuex magic string for vuex getter
 * ```
 */
export const api = {};

/**
 * Set the importer that can read all stores via require.context
 */
export const setup = (newImporter) => {
  importer = newImporter;

  const modules = importer.getModules();
  Object.keys(modules).forEach((module) => {
    const camelCasedName = toCamelCase(modules[module].name);
    api[camelCasedName] = modules[module].api;
  });
};

function ModuleNotFoundException(baseStoreName) {
  this.message = 'Module [' + baseStoreName + '] could not be loaded.';
  this.name = 'ModuleNotFoundException';
}

/**
 * Generate new component instance and return a mixin as well as functions
 * to map getters and actions to computed and methods.
 */
export const use = function use(baseStoreName) {
  const loadedModule = importer.getModules()[baseStoreName];
  if (!loadedModule) {
    throw new ModuleNotFoundException(baseStoreName);
  }

  baseStoreName = baseStoreName.replace(/-store$/, '');

  const { mapActions, mapGetters } = generateMappingFunction(baseStoreName);
  const addStore = generateAddStore(baseStoreName, loadedModule, importer);

  return {
    mapActions,
    mapGetters,
    mixins: {
      addStore,
      useStore,
    },
  };
};
